; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "OAKEnvironment"
#define MyAppVersion "v4"
#define MyAppPublisher "OAKChina"
#define MyAppURL "https://www.OAKChina.com/"

[Setup]
; NOTE: The value of AppId uniquely identifies this application. Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{17BB7B8A-6E67-4FC0-ACDB-56F710D9F77F}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={%USERPROFILE}\{#MyAppName}
DefaultGroupName=OAKEnvironment
; Uncomment the following line to run in non administrative install mode (install for current user only.)
;PrivilegesRequired=lowest
OutputBaseFilename=OAK_package_depthai-V2.16.0.0_20220613
SetupIconFile=.\Icon\oakChina.ico
Compression=lzma
SolidCompression=yes
WizardStyle=modern
ChangesEnvironment=true
PrivilegesRequired=admin

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"
Name: "chinesesimplified"; MessagesFile: "compiler:Languages\Chinese.isl"





[Files]
Source: ".\depthai\*"; DestDir: "{app}\depthai"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: ".\depthai_API_examples\*"; DestDir: "{app}\depthai_API_examples"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: ".\python\*"; DestDir: "{app}\python"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: ".\pip\*"; DestDir: "{userappdata}\pip"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: ".\.cache\*"; DestDir: "{%USERPROFILE}\.cache"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: ".\Icon\*"; DestDir: "{app}\Icon"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: ".\depthai-experiments\*"; DestDir: "{app}\depthai-experiments"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: ".\install.bat"; DestDir: "{app}"; Flags: ignoreversion
Source: ".\depthai_demo.bat"; DestDir: "{app}"; Flags: ignoreversion
Source: ".\depthai_calibrate.bat"; DestDir: "{app}"; Flags: ignoreversion
Source: ".\depthai_demo_usb2.bat"; DestDir: "{app}"; Flags: ignoreversion
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Tasks]
Name: envPath; Description: "是否添加Python环境变量"
Name: dirPath; Description: "是否添加安装目录到系统变量"

;[Registry]
;Root: HKCU; Subkey: "Environment"; ValueType: string; ValueName: "DEPTHAI_HOME"; ValueData: "{app}";Flags: preservestringtype

[Code]
const SystemEnvironmentKey = 'SYSTEM\CurrentControlSet\Control\Session Manager\Environment';
const UserEnvironmentKey = 'Environment';

procedure EnvAddPath(Path: string);
var
    Paths: string;
begin
    if not RegQueryStringValue(HKEY_LOCAL_MACHINE, SystemEnvironmentKey, 'Path', Paths)
    then Paths := '';

    if Pos(';' + Uppercase(Path) + ';', ';' + Uppercase(Paths) + ';') > 0 then exit;

    Paths := Paths + ';'+ Path +';'

    if RegWriteStringValue(HKEY_LOCAL_MACHINE, SystemEnvironmentKey, 'Path', Paths)
    then Log(Format('The [%s] added to PATH: [%s]', [Path, Paths]))
    else Log(Format('Error while adding the [%s] to PATH: [%s]', [Path, Paths]));
end;

procedure EnvRemovePath(Path: string);
var
    Paths: string;
    P: Integer;
begin
    if not RegQueryStringValue(HKEY_LOCAL_MACHINE, SystemEnvironmentKey, 'Path', Paths) then
        exit;

    P := Pos(';' + Uppercase(Path) + ';', ';' + Uppercase(Paths) + ';');
    if P = 0 then exit;

    Delete(Paths, P - 1, Length(Path) + 1);

    if RegWriteStringValue(HKEY_LOCAL_MACHINE, SystemEnvironmentKey, 'Path', Paths)
    then Log(Format('The [%s] removed from PATH: [%s]', [Path, Paths]))
    else Log(Format('Error while removing the [%s] from PATH: [%s]', [Path, Paths]));
end;

procedure dirAddPath(Path: string);
var
    Paths: string;
begin

    if not RegQueryStringValue(HKEY_LOCAL_MACHINE, SystemEnvironmentKey, 'DEPTHAI_HOME', Paths)
    then Paths := '';

    if Pos(Uppercase(Path), Uppercase(Paths)) > 0 then exit;

    Paths := Paths + Path

    if RegWriteStringValue(HKEY_LOCAL_MACHINE, SystemEnvironmentKey, 'DEPTHAI_HOME', Paths)
    then Log(Format('The [%s] added to PATH: [%s]', [Path, Paths]))
    else Log(Format('Error while adding the [%s] to PATH: [%s]', [Path, Paths]));
end;

procedure dirRemovePath(Path: string);
var
    Paths: string;
    P: Integer;
begin
    if not RegQueryStringValue(HKEY_LOCAL_MACHINE, SystemEnvironmentKey, 'DEPTHAI_HOME', Paths) then
        exit;

    P := Pos(Uppercase(Path), Uppercase(Paths));
    if P = 0 then exit;
    RegDeleteValue(HKEY_LOCAL_MACHINE, SystemEnvironmentKey, 'DEPTHAI_HOME');
end;

procedure CurStepChanged(CurStep: TSetupStep);
begin
    if (CurStep = ssPostInstall) and IsTaskSelected('envPath') then begin
      EnvAddPath(ExpandConstant('{app}') +'\python');
      EnvAddPath(ExpandConstant('{app}') + '\python\Scripts');
    end;
    if (CurStep = ssPostInstall) and IsTaskSelected('dirPath') then begin
      dirAddPath(ExpandConstant('{app}'));
    end;
end;

procedure CurUninstallStepChanged(CurUninstallStep: TUninstallStep);
begin
    if CurUninstallStep = usPostUninstall then begin
      EnvRemovePath(ExpandConstant('{app}') +'\python');
      EnvRemovePath(ExpandConstant('{app}') +'\python\Scripts');
    end;
    if CurUninstallStep = usPostUninstall then begin
      dirRemovePath(ExpandConstant('{app}'));
    end;
end;

[Run]
Filename: "{app}\install.bat"; Description: "Install depthai_sdk"; Flags: nowait skipifdoesntexist

[icons]
Name: "{userdesktop}\OAK USB3.0 Demo"; Filename: "{app}\depthai_demo.bat"; WorkingDir: "{app}"; IconFilename: "{app}\Icon\oakChina.ico"
Name: "{userdesktop}\OAK USB2.0 Demo"; Filename: "{app}\depthai_demo_usb2.bat"; WorkingDir: "{app}"; IconFilename: "{app}\Icon\oakChina.ico"
